/*
   Copyright 2018 Amadeus SAS

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/

// Generated file, do not modify manually!

// This file was automatically generated by informer-gen

package v1

import (
	daemonsetjob_v1 "github.com/amadeusitgroup/workflow-controller/pkg/api/daemonsetjob/v1"
	versioned "github.com/amadeusitgroup/workflow-controller/pkg/client/clientset/versioned"
	internalinterfaces "github.com/amadeusitgroup/workflow-controller/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/amadeusitgroup/workflow-controller/pkg/client/listers/daemonsetjob/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// DaemonSetJobInformer provides access to a shared informer and lister for
// DaemonSetJobs.
type DaemonSetJobInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.DaemonSetJobLister
}

type daemonSetJobInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewDaemonSetJobInformer constructs a new informer for DaemonSetJob type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDaemonSetJobInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredDaemonSetJobInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredDaemonSetJobInformer constructs a new informer for DaemonSetJob type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDaemonSetJobInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DaemonsetjobV1().DaemonSetJobs(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DaemonsetjobV1().DaemonSetJobs(namespace).Watch(options)
			},
		},
		&daemonsetjob_v1.DaemonSetJob{},
		resyncPeriod,
		indexers,
	)
}

func (f *daemonSetJobInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredDaemonSetJobInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *daemonSetJobInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&daemonsetjob_v1.DaemonSetJob{}, f.defaultInformer)
}

func (f *daemonSetJobInformer) Lister() v1.DaemonSetJobLister {
	return v1.NewDaemonSetJobLister(f.Informer().GetIndexer())
}
